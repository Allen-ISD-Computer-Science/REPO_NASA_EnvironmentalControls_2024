/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/f101feaa-c3d5-428d-8176-45288fe9a6ae

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudTemperatureSensor temperature_C;
  CloudTemperatureSensor temperature_F;
  CloudLuminance light;
  CloudRelativeHumidity humidity;
  CloudPressure pressure;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <Arduino_MKRENV.h>

int _temperature_C = 0;
int _temperature_F = 0;
int _humidity = 0;
float _pressure = 0;
float _lux = 0;

unsigned long lastConnectionTime = 0;              // last time you connected to the server, in milliseconds
const unsigned long postingInterval = 1000;       // delay between updates, in milliseconds
int debug = 0;

void setup() {

  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  if (!ENV.begin()) {
    Serial.println("Failed to initialize MKR ENV shield!");
    while (1);
  }

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {

  // If 2 seconds have passed since the last connection,
  // then this line helps the Arduino connect again and send data:
  if (millis() - lastConnectionTime > postingInterval)
  {
    readSensors();

    temperature_F = _temperature_F;
    humidity = _humidity;
    pressure = _pressure;
    light = _lux;
    temperature_C = _temperature_C;

    lastConnectionTime = millis();

    ArduinoCloud.update();
  }
}

void readSensors() {
  _temperature_F = ENV.readTemperature(FAHRENHEIT);
  _humidity = ENV.readHumidity();
  _pressure = ENV.readPressure();
  _lux = ENV.readLux();
  _temperature_C = ENV.readTemperature();
}